package testcases

var DaoTpl = `
// Generated by xogen

package {{.Package}}

import (
	"errors"
	"fmt"
	"{{.ModelImport}}"
	"time"
)

type _{{.Name}}Dao struct {
	*Dao
}

func (dao *Dao) {{.Name}}() *_{{.Name}}DaoHook {
	return &_{{.Name}}DaoHook{&_{{.Name}}Dao{Dao: dao}}
}

type _{{.Name}}DaoHook struct {
	*_{{.Name}}Dao
}

{{ range .ModelSpecs }}

/******************************
 * Model {{.ModelName}} CRUD operations generated by xogen.
 ******************************/

// Add{{.ModelName}} 创建{{.ModelName}}
func (dao *_{{$.Name}}Dao) Add{{.ModelName}}({{ range .AllFieldsExceptIdCreatedUpdated }} {{.VarName}} {{.FieldType}}{{.EndMark}}{{ end }}) error {
	row := new(models.{{.ModelName}})
	{{ range .AllFieldsExceptIdCreatedUpdated }}
	row.{{.FieldName}} = {{.VarName}}{{ end }}

	affected, err := dao.db().Insert(row)
	if err != nil {
		return err
	} else if affected < 1 {
		return errors.New("create 0 {{.ModelName}}")
	}
	return nil
}

// Get{{.ModelName}} 获取{{.ModelName}}
func (dao *_{{$.Name}}Dao) Get{{.ModelName}}({{ range .UniFields }} {{.VarName}} {{.FieldType}}{{.EndMark}}{{ end }}) (*models.{{.ModelName}}, error) {
	row := new(models.{{.ModelName}})
	has, err := dao.db().{{ range .UniFields }}And("{{.DBField}} = ?", {{.VarName}}).{{ end }}
		Get(row)
	if err != nil || !has {
		return nil, err
	}
	return row, nil
}

// Get{{.ModelName}}List 获取{{.ModelName}}列表
func (dao *_{{$.Name}}Dao) Get{{.ModelName}}List({{ ( index .KeyFields 0 ).VarName}} {{ ( index .KeyFields 0 ).FieldType}}) ([]*models.{{.ModelName}}, error) {
	rows := make([]*models.{{.ModelName}}, 0)
	err := dao.db().Where("{{ ( index .KeyFields 0 ).DBField}} = ?", {{ ( index .KeyFields 0 ).VarName}} ).
		Find(&rows)
	return rows, err
}

// Get{{.ModelName}}ListFromSlave 从库获取{{.ModelName}}列表
func (dao *_{{$.Name}}Dao) Get{{.ModelName}}ListFromSlave({{ ( index .KeyFields 0 ).VarName}} {{ ( index .KeyFields 0 ).FieldType}}) ([]*models.{{.ModelName}}, error) {
	rows := make([]*models.{{.ModelName}}, 0)
	err := dao.db(true, true).Where("{{ ( index .KeyFields 0 ).DBField}} = ?", {{ ( index .KeyFields 0 ).VarName}} ).
		Find(&rows)
	return rows, err
}

// Get{{.ModelName}}ListWithRange 获取{{.ModelName}}范围列表
func (dao *_{{$.Name}}Dao) Get{{.ModelName}}ListWithRange({{ ( index .KeyFields 0 ).VarName}} {{ ( index .KeyFields 0 ).FieldType}}, offset, limit int) (rows []*models.{{.ModelName}}, err error) {
	if err = dao.db().Where("{{ ( index .KeyFields 0 ).DBField}} = ?", {{ ( index .KeyFields 0 ).VarName}} ){{$length := len .CreatedFields}}{{if gt $length 0}}.OrderBy("{{ ( index .CreatedFields 0 ).DBField}} desc"){{end}}.Limit(limit, offset).Find(&rows); err != nil {
		return
	}
	return
}

// Del{{.ModelName}} 删除{{.ModelName}}
func (dao *_{{$.Name}}Dao) Del{{.ModelName}}({{ range .UniFields }} {{.VarName}} {{.FieldType}}{{.EndMark}}{{ end }}) error {
	row := new(models.{{.ModelName}})
	affected, err := dao.db().Where("uid = ?", uid).{{ range .UniFields }}And("{{.DBField}} = ?", {{.VarName}}).{{ end }}Delete(row)
	if err != nil {
		return err
	} else if affected < 1 {
		return fmt.Errorf("删除{{.ModelName}}失败")
	}
	return nil
}

// GetAll{{.ModelName}}Count 获取{{.ModelName}}总个数
func (dao *_{{$.Name}}Dao) GetAll{{.ModelName}}Count() (int, error) {
	row := new(models.{{.ModelName}})
	total, err := dao.db().Count(row)
	if err != nil {
		return 0, err
	}
	return int(total), nil
}

// Update{{.ModelName}} 更新Update{{.ModelName}}
func (dao *_{{$.Name}}Dao) Update{{.ModelName}}({{ range .UniFields }} {{.VarName}} {{.FieldType}}{{.EndMark}}{{ end }}, data map[string]interface{}) error {
	affected, err := dao.db().{{ range .UniFields }}And("{{.DBField}} = ?", {{.VarName}}).{{ end }}Update(data)
	if nil != err{
		return err
	}
	if affected < 1 {
		return errors.New("update Update{{.ModelName}} fail")
	}
	return nil
}

// Update{{.ModelName}}2 更新Update{{.ModelName}}2
func (dao *_{{$.Name}}Dao) Update{{.ModelName}}2({{ range .UniFields }} {{.VarName}} {{.FieldType}}{{.EndMark}}{{ end }}, row *models.{{.ModelName}}) error {
	affected, err := dao.db().{{ range .UniFields }}And("{{.DBField}} = ?", {{.VarName}}).{{ end }}Update(row)
	if nil != err{
		return err
	}
	if affected < 1 {
		return errors.New("update Update{{.ModelName}} fail")
	}
	return nil
}

{{ end }}
`
