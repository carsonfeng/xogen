// Generated by xogen

package daos

import (
	"errors"
	"fmt"
	"time"
	"xogen/testcases/models"
)

type _DemoDao struct {
	*Dao
}

func (dao *Dao) Demo() *_DemoDaoHook {
	return &_DemoDaoHook{&_DemoDao{Dao: dao}}
}

type _DemoDaoHook struct {
	*_DemoDao
}

/******************************
 * Model DemoTeamModel1 CRUD operations generated by xogen.
 ******************************/

// AddDemoTeamModel1 创建DemoTeamModel1
func (dao *_DemoDao) AddDemoTeamModel1(uid int, level string, typ string, scenes string, team string, teamLabel string, teamLabelReason string, source string, validAt time.Time) error {
	row := new(models.DemoTeamModel1)

	row.Uid = uid
	row.Level = level
	row.Type = typ
	row.Scenes = scenes
	row.Team = team
	row.TeamLabel = teamLabel
	row.TeamLabelReason = teamLabelReason
	row.Source = source
	row.ValidAt = validAt

	affected, err := dao.db().Insert(row)
	if err != nil {
		return err
	} else if affected < 1 {
		return errors.New("create 0 DemoTeamModel1")
	}
	return nil
}

// GetDemoTeamModel1 获取DemoTeamModel1
func (dao *_DemoDao) GetDemoTeamModel1(uid int) (*models.DemoTeamModel1, error) {
	row := new(models.DemoTeamModel1)
	has, err := dao.db().And("uid = ?", uid).
		Get(row)
	if err != nil || !has {
		return nil, err
	}
	return row, nil
}

// GetDemoTeamModel1List 获取DemoTeamModel1列表
func (dao *_DemoDao) GetDemoTeamModel1List(uid int) ([]*models.DemoTeamModel1, error) {
	rows := make([]*models.DemoTeamModel1, 0)
	err := dao.db().Where("uid = ?", uid).
		Find(&rows)
	return rows, err
}

// GetDemoTeamModel1ListFromSlave 从库获取DemoTeamModel1列表
func (dao *_DemoDao) GetDemoTeamModel1ListFromSlave(uid int) ([]*models.DemoTeamModel1, error) {
	rows := make([]*models.DemoTeamModel1, 0)
	err := dao.db(true, true).Where("uid = ?", uid).
		Find(&rows)
	return rows, err
}

// GetDemoTeamModel1ListWithRange 获取DemoTeamModel1范围列表
func (dao *_DemoDao) GetDemoTeamModel1ListWithRange(uid int, offset, limit int) (rows []*models.DemoTeamModel1, err error) {
	if err = dao.db().Where("uid = ?", uid).OrderBy("create_at desc").Limit(limit, offset).Find(&rows); err != nil {
		return
	}
	return
}

// DelDemoTeamModel1 删除DemoTeamModel1
func (dao *_DemoDao) DelDemoTeamModel1(uid int) error {
	row := new(models.DemoTeamModel1)
	affected, err := dao.db().Where("uid = ?", uid).And("uid = ?", uid).Delete(row)
	if err != nil {
		return err
	} else if affected < 1 {
		return fmt.Errorf("删除DemoTeamModel1失败")
	}
	return nil
}

// GetAllDemoTeamModel1Count 获取DemoTeamModel1总个数
func (dao *_DemoDao) GetAllDemoTeamModel1Count() (int, error) {
	row := new(models.DemoTeamModel1)
	total, err := dao.db().Count(row)
	if err != nil {
		return 0, err
	}
	return int(total), nil
}

// UpdateDemoTeamModel1 更新UpdateDemoTeamModel1
func (dao *_DemoDao) UpdateDemoTeamModel1(uid int, data map[string]interface{}) error {
	affected, err := dao.db().Table("demo_team_model1").And("uid = ?", uid).Update(data)
	if nil != err {
		return err
	}
	if affected < 1 {
		return errors.New("update UpdateDemoTeamModel1 fail")
	}
	return nil
}

// UpdateDemoTeamModel12 更新UpdateDemoTeamModel12
func (dao *_DemoDao) UpdateDemoTeamModel12(uid int, row *models.DemoTeamModel1) error {
	affected, err := dao.db().And("uid = ?", uid).Update(row)
	if nil != err {
		return err
	}
	if affected < 1 {
		return errors.New("update UpdateDemoTeamModel1 fail")
	}
	return nil
}

/******************************
 * Model DemoUserModel2 CRUD operations generated by xogen.
 ******************************/

// AddDemoUserModel2 创建DemoUserModel2
func (dao *_DemoDao) AddDemoUserModel2(uid int, level string) error {
	row := new(models.DemoUserModel2)

	row.Uid = uid
	row.Level = level

	affected, err := dao.db().Insert(row)
	if err != nil {
		return err
	} else if affected < 1 {
		return errors.New("create 0 DemoUserModel2")
	}
	return nil
}

// GetDemoUserModel2 获取DemoUserModel2
func (dao *_DemoDao) GetDemoUserModel2(uid int) (*models.DemoUserModel2, error) {
	row := new(models.DemoUserModel2)
	has, err := dao.db().And("uid = ?", uid).
		Get(row)
	if err != nil || !has {
		return nil, err
	}
	return row, nil
}

// GetDemoUserModel2List 获取DemoUserModel2列表
func (dao *_DemoDao) GetDemoUserModel2List(uid int) ([]*models.DemoUserModel2, error) {
	rows := make([]*models.DemoUserModel2, 0)
	err := dao.db().Where("uid = ?", uid).
		Find(&rows)
	return rows, err
}

// GetDemoUserModel2ListFromSlave 从库获取DemoUserModel2列表
func (dao *_DemoDao) GetDemoUserModel2ListFromSlave(uid int) ([]*models.DemoUserModel2, error) {
	rows := make([]*models.DemoUserModel2, 0)
	err := dao.db(true, true).Where("uid = ?", uid).
		Find(&rows)
	return rows, err
}

// GetDemoUserModel2ListWithRange 获取DemoUserModel2范围列表
func (dao *_DemoDao) GetDemoUserModel2ListWithRange(uid int, offset, limit int) (rows []*models.DemoUserModel2, err error) {
	if err = dao.db().Where("uid = ?", uid).Limit(limit, offset).Find(&rows); err != nil {
		return
	}
	return
}

// DelDemoUserModel2 删除DemoUserModel2
func (dao *_DemoDao) DelDemoUserModel2(uid int) error {
	row := new(models.DemoUserModel2)
	affected, err := dao.db().Where("uid = ?", uid).And("uid = ?", uid).Delete(row)
	if err != nil {
		return err
	} else if affected < 1 {
		return fmt.Errorf("删除DemoUserModel2失败")
	}
	return nil
}

// GetAllDemoUserModel2Count 获取DemoUserModel2总个数
func (dao *_DemoDao) GetAllDemoUserModel2Count() (int, error) {
	row := new(models.DemoUserModel2)
	total, err := dao.db().Count(row)
	if err != nil {
		return 0, err
	}
	return int(total), nil
}

// UpdateDemoUserModel2 更新UpdateDemoUserModel2
func (dao *_DemoDao) UpdateDemoUserModel2(uid int, data map[string]interface{}) error {
	affected, err := dao.db().Table("demo_user_model2").And("uid = ?", uid).Update(data)
	if nil != err {
		return err
	}
	if affected < 1 {
		return errors.New("update UpdateDemoUserModel2 fail")
	}
	return nil
}

// UpdateDemoUserModel22 更新UpdateDemoUserModel22
func (dao *_DemoDao) UpdateDemoUserModel22(uid int, row *models.DemoUserModel2) error {
	affected, err := dao.db().And("uid = ?", uid).Update(row)
	if nil != err {
		return err
	}
	if affected < 1 {
		return errors.New("update UpdateDemoUserModel2 fail")
	}
	return nil
}
